import { NextApiRequest, NextApiResponse } from 'next';
import multer from 'multer';
import { createRouter } from 'next-connect';
import path from 'path';
import fs from 'fs';
import Student from '../../../models/Student';
import Staff from '../../../models/staff';

// Setup multer storage configuration
const upload = multer({
  storage: multer.diskStorage({
    destination: (req, file, cb) => {
      const uploadDir = './uploads';
      if (!fs.existsSync(uploadDir)) {
        fs.mkdirSync(uploadDir); // Create the directory if it doesn't exist
      }
      cb(null, uploadDir); // Set the destination for file uploads
    },
    filename: (req, file, cb) => {
      cb(null,` ${Date.now()}_${file.originalname}`); // Set the filename to be unique with a timestamp
    },
  }),
  limits: { fileSize: 10 * 1024 * 1024 }, // Max file size: 10MB
}).single('file'); // Handle single file upload with the field name "file"

// Create a new router instance using next-connect
const handler = createRouter<NextApiRequest, NextApiResponse>();

// API endpoint for uploading a file
handler.use(upload).post(async (req, res) => {
  try {
    const { studentId, staffId } = req.body; // Expecting studentId and staffId in the body

    // Validate if the student and staff exist
    const student = await Student.findById(studentId);
    const staff = await Staff.findById(staffId);

    if (!student) {
      return res.status(404).json({ error: 'Student not found' });
    }
    if (!staff) {
      return res.status(404).json({ error: 'Staff not found' });
    }

    // Save the file path to the student record (assuming the file is saved in the uploads directory)
    student.signature =` /uploads/${req.file.filename}`; // Store file path in signature field
    student.nameOfClearingOfficer = staff._id; // Set clearing officer reference to staff

    // Update the student record
    await student.save();

    // Send the response with file details
    res.status(200).json({
      message: 'File uploaded successfully',
      file: req.file,
      student: student,
    });
  } catch (error) {
    console.error('Error during file upload:', error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

export default handler;